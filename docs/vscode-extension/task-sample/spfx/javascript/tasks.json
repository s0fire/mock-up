// This file is automatically generated by Teams Toolkit.
// The teamsfx tasks defined in this file require Teams Toolkit version >= 4.1.0.
// See https://aka.ms/teamsfx-debug-tasks for details on how to customize each task and how to integrate with existing Teams Toolkit projects.
{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "prepare dev env",
            "dependsOn": [
                "Validate & install prerequisites",
                "Build & upload Teams manifest",
                "gulp serve"
            ],
            "dependsOrder": "sequence"
        },
        {
            // Check if all required prerequisites are installed and will install them if not.
            // See https://aka.ms/teamsfx-check-prerequisites-task to know the details and how to customize the args.
            "label": "Validate & install prerequisites",
            "type": "teamsfx",
            "command": "debug-check-prerequisites",
            "args": {
                "prerequisites": [
                    "nodejs", // Validate if Node.js is installed.
                    "m365Account", // Sign-in prompt for Microsoft 365 account, then validate if the account enables the sideloading permission.
                    "portOccupancy" // Validate available ports to ensure those debug ones are not occupied.
                ],
                "portOccupancy": [
                    4321 // SPFx service port
                ]
            }
        },
        {
            // Build and upload Teams manifest.
            // See https://aka.ms/teamsfx-debug-prepare-manifest-task to know the details and how to customize the args.
            "label": "Build & upload Teams manifest",
            "type": "teamsfx",
            "command": "debug-prepare-manifest",
            "args": {
                //// Enter your own Teams app package path if using the existing Teams manifest. ////
                // "appPackagePath": ""
            }
        },
        {
            // Check if all the npm packages are installed and will install them if not.
            // See https://aka.ms/teamsfx-npm-package-task to know the details and how to customize the args.
            "label": "Install npm packages",
            "type": "teamsfx",
            "command": "debug-npm-install",
            "args": {
                "projects": [
                    {
                        "cwd": "${workspaceFolder}/SPFx",
                        "npmInstallArgs": [
                            "--no-audit"
                        ]
                    }
                ]
            }
        },
        {
            "label": "gulp trust-dev-cert",
            "type": "process",
            "command": "node",
            "args": [
                "${workspaceFolder}/SPFx/node_modules/gulp/bin/gulp.js",
                "trust-dev-cert"
            ],
            "options": {
                "cwd": "${workspaceFolder}/SPFx"
            },
            "dependsOn": "Install npm packages"
        },
        {
            "label": "gulp serve",
            "type": "process",
            "command": "node",
            "args": [
                "${workspaceFolder}/SPFx/node_modules/gulp/bin/gulp.js",
                "serve",
                "--nobrowser"
            ],
            "problemMatcher": [
                {
                    "pattern": [
                        {
                            "regexp": ".",
                            "file": 1,
                            "location": 2,
                            "message": 3
                        }
                    ],
                    "background": {
                        "activeOnStart": true,
                        "beginsPattern": "^.*Starting gulp.*",
                        "endsPattern": "^.*Finished subtask 'reload'.*"
                    }
                }
            ],
            "isBackground": true,
            "options": {
                "cwd": "${workspaceFolder}/SPFx"
            },
            "dependsOn": "gulp trust-dev-cert"
        },
        {
            "label": "Terminate All Tasks",
            "command": "echo ${input:terminate}",
            "type": "shell",
            "problemMatcher": []
        }
    ],
    "inputs": [
        {
            "id": "terminate",
            "type": "command",
            "command": "workbench.action.tasks.terminate",
            "args": "terminateAll"
        }
    ]
}