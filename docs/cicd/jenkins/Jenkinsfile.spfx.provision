// This is just an example workflow for provision.
// The example workflow is expected to run on Ubuntu stable versions, for example, 20.04lts and later.
// You should customize it to meet your own requirements.
pipeline {
    // To customize the agent field, please refer to https://www.jenkins.io/doc/book/pipeline/syntax/#agent.
    agent any

    // Manually trigger this workflow.
    // To customize triggers, please refer to https://www.jenkins.io/doc/book/pipeline/syntax/#triggers.
    // triggers { pollSCM('H */4 * * 1-5') }

    // To learn more about environment, please refer to https://www.jenkins.io/doc/book/pipeline/syntax/#environment.
    environment {
        M365_ACCOUNT_NAME = credentials('M365_ACCOUNT_NAME')
        M365_ACCOUNT_PASSWORD = credentials('M365_ACCOUNT_PASSWORD')
        M365_TENANT_ID = credentials('M365_TENANT_ID')
        // To enable M365 account login by non-interactive mode. 
        CI_ENABLED = 'true'

        // To specify the environment name which will be used as an option below.
        // You can change it to use your own environment name.
        TEAMSFX_ENV_NAME = 'dev'
        // To specify the version of TTK CLI for use.
        TEAMSFX_CLI_VERSION = '1.*'
    }

    stages {
        // Setup environment.
        stage('Setup environment') {
            steps {
                // Install the TTK CLI for later use.
                sh 'npm install @microsoft/teamsfx-cli@${TEAMSFX_CLI_VERSION}'
                // Check the version of teamsfx.
                sh 'npx teamsfx -v'
            }
        }

        // We suggest to do the `npx teamsfx provision` step manually or in a separate pipeline. The following steps are for your reference.
        // After provisioning, you should commit necessary files under teamsfx into the repository.
        stage('Provision hosting environment') {
            steps {
                sh 'npx teamsfx provision --env ${TEAMSFX_ENV_NAME}'
            }
        }

        stage('Commit provision configs if necessary') {
            steps {
                sh 'git config user.name "azdo-agent"'
                sh 'git config user.email "azdo-agent@azure.com"'
                sh 'git add .'
                sh 'git commit -m "chore: commit provision configs"'
                // Using awk to extract origin and branch name.
                sh 'git push `echo $GIT_BRANCH | awk -F\'/\' \'{print $1, "HEAD:"$2}\'`'
            }
        }
    }
}
